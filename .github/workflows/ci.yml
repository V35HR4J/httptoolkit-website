name: CI
on: [push, pull_request]
jobs:
  build:
    name: Build & test
    runs-on: ubuntu-latest
    container: httptoolkit/act-build-base
    steps:
      - uses: actions/checkout@v2

      # Install Node 14
      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - run: npm install -g npm@8.5.5

      # Install & build & test:
      - run: npm ci

      # Build without secrets for previews, in non-push cases:
      - name: Build for preview
        if: github.event_name != 'push'
        run: npm run build
        env:
          NODE_ENV: development

      # Build with secrets for production, on push only:
      - name: Build for production
        if: github.event_name == 'push'
        run: npm run build
        env:
          NODE_ENV: production
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}

      - uses: actions/upload-artifact@v2
        with:
          name: public
          path: public/*
          if-no-files-found: error

  publish-netlify:
    name: Deploy ${{ (github.ref == 'refs/heads/master' && 'to Netlify production') || 'Netlify preview' }}
    runs-on: ubuntu-latest
    container: httptoolkit/act-build-base
    needs: build
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: public
          path: public

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v1.1
        with:
          publish-dir: './public'
          production-branch: master # Master goes to prod, others do deploy previews
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: GHA Deploy - ${{ github.event.head_commit.message }}
          enable-commit-status: true
          enable-pull-request-comment: false
          enable-commit-comment: false
          netlify-config-path: ./netlify.toml
          alias: ${{ github.sha }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  publish-hidora:
    name: Deploy to Docker Hub & Hidora
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    container: httptoolkit/act-build-base
    needs: build
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: public
          path: public

      - uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: httptoolkit/website
          tags: |
            type=raw,value=prod,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Deploy to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Redeploy site
        if: github.event_name == 'push' && github.ref == 'ref/head/master'
        run: |
          sleep 30 # Wait for Docker Hub to fully publish

          # Trigger a container redeploy:
          curl "https://app.hidora.com/1.0/environment/control/rest/redeploycontainersbygroup?session=$HIDORA_API_TOKEN&envName=htk-website&nodeGroup=cp&tag=prod&useExistingVolumes=true" | \
             tee /dev/stderr | \
             grep -q 'Node has been successfully updated'
        env:
          HIDORA_API_TOKEN: ${{ secrets.HIDORA_API_TOKEN }}